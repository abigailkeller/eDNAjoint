# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = log_p10,
alpha = alpha,
phi = phi
)
names(inits[[1]]) <- c('mu','p10','alpha',
'phi')
# run model
fit <- jointModel(data=data, family = 'negbin',
cov=c('var_a','var_b'),
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','phi','alpha[1]') %in% output_params))
## 11.
# model includes 'p10','alpha'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
count[i,] <- rpois(nobs_count,mu[i])
}
# site-level covariates
mat_site <- matrix(NA,nrow=nsite,ncol=length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA,nrow=nsite,ncol=nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA,nrow=nsite,ncol=nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = log_p10,
alpha = alpha
)
names(inits[[1]]) <- c('mu','p10','alpha'
)
# run model
fit <- jointModel(data=data,
cov=c('var_a','var_b'),
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','alpha[1]') %in% output_params))
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
beta_gamma <- 1
alpha_gamma <- mu * beta_gamma
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
count[i,] <- rgamma(nobs_count,shape=alpha_gamma[i],rate=beta_gamma)
}
# site-level covariates
mat_site <- matrix(NA,nrow=nsite,ncol=length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA,nrow=nsite,ncol=nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA,nrow=nsite,ncol=nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha_gamma = mu,
beta_gamma = rep(1,length(mu)),
p10 = log_p10,
alpha = alpha
)
names(inits[[1]]) <- c('alpha_gamma','beta_gamma','p10','alpha'
)
# run model
fit <- jointModel(data=data,family='gamma',
cov=c('var_a','var_b'),
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','alpha[1]') %in% output_params))
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
phi <- 1.2
q <- 2
# traditional type
count_type <- cbind(matrix(1,nrow=nsite,ncol=nobs_count/2),
matrix(2,nrow=nsite,ncol=nobs_count/2))
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rnbinom(n=1,mu=mu[i],size=phi)
} else {
count[i,j] <- rnbinom(n=1,mu=mu[i]*q,size=phi)
}
}
}
# collect data
data <- list(
count = count,
count.type = count_type
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
phi = phi
)
names(inits[[1]]) <- c('mu','phi')
# run model
fit <- traditionalModel(data=data, q=TRUE, family='negbin',
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('q[1]','phi') %in% output_params))
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
q <- 2
# traditional type
count_type <- cbind(matrix(1,nrow=nsite,ncol=nobs_count/2),
matrix(2,nrow=nsite,ncol=nobs_count/2))
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rpois(n=1,mu[i])
} else {
count[i,j] <- rpois(n=1,mu[i]*q)
}
}
}
# collect data
data <- list(
count = count,
count.type = count_type
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu
)
names(inits[[1]]) <- c('mu')
# run model
fit <- traditionalModel(data=data, q=TRUE,
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('q[1]') %in% output_params))
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
q <- 2
beta_gamma <- 1
alpha_gamma <- mu * beta_gamma
# traditional type
count_type <- cbind(matrix(1,nrow=nsite,ncol=nobs_count/2),
matrix(2,nrow=nsite,ncol=nobs_count/2))
# collect data
data <- list(
count = count,
count.type = count_type
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha_gamma = mu,
beta_gamma = rep(1,length(mu))
)
names(inits[[1]]) <- c('alpha_gamma','beta_gamma')
# run model
fit <- traditionalModel(data=data, q=TRUE,family='gamma',
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
fit$model
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
q <- 2
beta_gamma <- 1
alpha_gamma <- mu * beta_gamma
# traditional type
count_type <- cbind(matrix(1,nrow=nsite,ncol=nobs_count/2),
matrix(2,nrow=nsite,ncol=nobs_count/2))
# collect data
data <- list(
count = count,
count.type = count_type
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha = mu,
beta = rep(1,length(mu)),
q=q
)
names(inits[[1]]) <- c('alpha','beta','q')
# run model
fit <- traditionalModel(data=data, q=TRUE,family='gamma',
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
devtools::load_all()
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
fit$model
modelfit <- fit$model
all(c('q','alpha','beta') %in% modelfit@model_pars)==TRUE &&
all(!c('p10','beta','phi') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
modelfit@model_pars
par <- 'all'
all(c('q','alpha','beta') %in% modelfit@model_pars)==TRUE &&
all(!c('p10','beta','phi') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
all(c('q','alpha','beta') %in% modelfit@model_pars)==TRUE
all(!c('p10','beta','phi') %in% modelfit@model_pars==TRUE)
all(c('q','alpha','beta') %in% modelfit@model_pars)==TRUE &&
all(!c('p10','phi') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
devtools::load_all()
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('q[1]') %in% output_params))
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
phi <- 1.2
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
count[i,] <- rnbinom(n=nobs_count,mu=mu[i],size=phi)
}
# collect data
data <- list(
count = count
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
phi = phi
)
names(inits[[1]]) <- c('mu','phi')
# run model
fit <- traditionalModel(data=data,family='negbin',
n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('phi') %in% output_params))
## 17.
# model, pois (traditional model)
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
count[i,] <- rpois(n=nobs_count,mu[i])
}
# collect data
data <- list(
count = count
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu
)
names(inits[[1]]) <- c('mu')
# run model
fit <- traditionalModel(data=data,n.chain=1, multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(!c('p10','beta','q','phi') %in% output_params))
devtools::load_all()
## 18.
# model, gamma (traditional model)
# constants
nsite <- 20
nobs_count <- 100
# params
mu <- rlnorm(nsite,meanlog=log(1),sdlog=1)
beta_gamma <- 1
alpha_gamma <- mu * beta_gamma
# count
count <- matrix(NA,nrow=nsite,ncol=nobs_count)
for(i in 1:nsite){
count[i,] <- rgamma(nobs_count,shape=alpha_gamma[i],rate=beta_gamma)
}
# collect data
data <- list(
count = count
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha = mu,
beta = rep(1,length(mu))
)
names(inits[[1]]) <- c('alpha','beta')
# run model
fit <- traditionalModel(data=data,n.chain=1, family='gamma',
multicore=FALSE, seed = 10,
initial_values=inits)
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(!c('p10','q','phi') %in% output_params))
roxygen2::roxygenise()
library(covr)
package_coverage()
getwd()
cov <- package_coverage("/home/abby/eDNAjoint")
posterior <- read.csv('../eDNA_presentation/Joint_posterior.csv')
library(tidyverse)
ggplot()+
geom_density(aes(x=posterior$p10))
ggplot()+
geom_density(aes(x=exp(posterior$p10)))
rounded <- round(posterior$p10,7)
head(roudned)
head(rounded)
table(rounded)
rounded <- round(posterior$p10,3)
table(rounded)
names(table(rounded))
names <- as.numeric(names(table(rounded)))
names
values <- as.vector(tables(rounded))
values <- as.vector(table(rounded))
ggplot()+
geom_line(aes(x=names,y=values))
ggplot()+
geom_line(aes(x=names,y=exp(values)))
rounded <- round(posterior$p10,7)
names <- as.numeric(names(table(rounded)))
values <- as.vector(table(rounded))
ggplot()+
geom_line(aes(x=names,y=exp(values)))
ggplot()+
geom_line(aes(x=exp(names),y=values))
rounded <- round(posterior$p10,3)
names <- as.numeric(names(table(rounded)))
values <- as.vector(table(rounded))
ggplot()+
geom_line(aes(x=exp(names),y=values))
ggplot()+
geom_smooth(aes(x=exp(names),y=values))
ggplot()+
geom_density(aes(x=exp(posterior$p10)))
ggplot()+
geom_density(aes(x=exp(posterior$p10)))+
labs(x='probability of false positive eDNA detection',
y='density')+
theme_minimal()
ggplot()+
geom_density(aes(x=exp(posterior$p10)),linewidth=1)+
labs(x='probability of false positive eDNA detection',
y='density')+
theme_minimal()
ggplot()+
geom_density(aes(x=exp(posterior$p10)),linewidth=1)+
labs(x='probability of false positive eDNA detection',
y='density')+
theme_minimal()+
theme(text=element_text(size=12))
p10_plot <- ggplot()+
geom_density(aes(x=exp(posterior$p10)),linewidth=1)+
labs(x='probability of false positive eDNA detection',
y='density')+
theme_minimal()+
theme(text=element_text(size=12))
ggsave('../eDNA_presentation/p10_plot.png',p10_plot,dpi=400)
raa_plot <- ggplot()+
geom_density(aes(x=posterior$mu_crab.15),linewidth=1)+
labs(x='EGC density (crabs/trap)',
y='density')+
theme_minimal()+
theme(text=element_text(size=12))
raa_plot
raa_plot <- ggplot()+
geom_density(aes(x=posterior$mu.15),linewidth=1)+
labs(x='EGC density (crabs/trap)',
y='density')+
theme_minimal()+
theme(text=element_text(size=12))
raa_plot
raa_plot <- ggplot()+
geom_density(aes(x=posterior$mu.15),linewidth=1)+
scale_x_continuous(limits=c(0,1.5))+
labs(x='EGC density (crabs/trap)',
y='density')+
theme_minimal()+
theme(text=element_text(size=12))
raa_plot
ggsave('../eDNA_presentation/raa_plot.png',p10_plot,dpi=400)
ggsave('../eDNA_presentation/raa_plot.png',raa_plot,dpi=400)
cov <- package_coverage("/home/abby/eDNAjoint")
cov$`detectionCalculate.R:429:7:429:70:7:70:431:431`
dim(cov)
str(cov)
cov$`detectionCalculate.R:429:7:429:70:7:70:431:431`
length(cov)
test <- as.data.frame(cov)
View(test)
table(test$value)
zero_coverage(cov)
getwd()
saveRDS(test,'../eDNAjoint_coverage.rds')
