mu.critical(test1,cov.val=c(0,0))
devtools::load_all()
mu.critical(test1,cov.val=c(0,0))
devtools::load_all()
summarize(test1,par='alpha')
mu.critical(test1,cov.val=c(0,0))
modelfit <- test1
#extract posteriors for beta and p10 parameters
##alpha
posterior_alpha <- rstan::extract(modelfit, pars = "alpha")$alpha
cov.val <- c(0,0)
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
c(1,cov.val)
cov.val <- c(0)
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
all(cov.val != 'None')
length(cov.val)!=(length(modelfit@par_dims$alpha)+1)
all(cov.val != 'None') && length(cov.val)!=(length(modelfit@par_dims$alpha)+1)
cov.val
rm(merp)
rm(posterior_alpha)
rm(posterior_beta)
rm(cov.val)
rm(critical_mu)
rm(par)
rm(posterior_p10)
rm(vec)
devtools::load_all()
summarize(test1,par='alpha')
devtools::load_all()
mu.critical(test1)
mu.critical(test1,cov.val=c(0,0))
mu.critical(test1,cov.val=c(0,1))
mu.critical(test1,cov.val=c(0))
is.numeric(c(0,0))
!is.numeric(c(0,0))
cov.val <- c(0,0)
all(cov.val != 'None') && !is.numeric(cov.val)
all(cov.val != 'None')
length(cov.val)
modelfit <- test1
length(modelfit@par_dims$alpha)
modelfit@par_dims$alpha
modelfit@par_dims$alpha
modelfit@par_dims$alpha-1
devtools::load_all()
mu.critical(test1,cov.val=c(0,0))
mu.critical(test1,cov.val=c(0))
mu.critical(test1,cov.val=0
)
mu.critical(test1,cov.val=0.5)
mu.critical(test1,cov.val=-0.5)
mu.critical(test2, cov.val=c(0,0))
mu.critical(test2, cov.val=c(0,1))
mu.critical(test3,cov.val=0)
devtools::load_all()
mu.critical(test3,cov.val=0)
modelfit <- test3
summary(modelfit)
summarize(modelfit)
all(cov.val != 'None')
c('alpha') %in% modelfit@model_pars
!c('alpha') %in% modelfit@model_pars
all(cov.val != 'None') && !c('alpha') %in% modelfit@model_pars
devtools::load_all()
mu.critical(test3,cov.val=0)
mu.critical(test3,cov.val='None')
!(all(c('phi','alpha') %in% modelfit@model_pars)
)
!(all(c('phi','alpha') %in% modelfit@model_pars))
all(!c('phi','alpha') %in% modelfit@model_pars)
list1 <- c('a','b','c')
list2 <- c('a','b')
list2 %in% list1
all(list2 %in% list1)
!all(list2 %in% list1)
all!(list2 %in% list1)
all(list2 %in% list1)
all(!list2 %in% list1)
all(c('a','b') %in% list1)
all(!c('a','b') %in% list1)
!all(c('a','b') %in% list1)
!(all(c('phi','alpha') %in% modelfit@model_pars)
)
all(c('phi','alpha') %in% modelfit@model_pars)
!(all(c('phi','alpha') %in% modelfit@model_pars))
all(!c('phi','alpha') %in% modelfit@model_pars)
modelfit <- test1
modelfit@model_pars
all(c('p10','q','phi','beta') %in% modelfit@model_pars)==TRUE &&
!c('alpha') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','beta','q') %in% modelfit@model_pars)==TRUE &&
!all(c('phi','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
all(c('p10','phi','beta') %in% modelfit@model_pars)==TRUE &&
!all(c('q','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
all(c('p10','beta') %in% modelfit@model_pars)==TRUE &&
!all(c('q','phi','alpha') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
all(c('p10','q','phi','alpha') %in% modelfit@model_pars)==TRUE &&
all(par == 'all')
all(c('p10','alpha','q') %in% modelfit@model_pars)==TRUE &&
!c('phi') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','phi','alpha') %in% modelfit@model_pars)==TRUE &&
!c('q') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','alpha') %in% modelfit@model_pars)==TRUE &&
!all(c('q','phi') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
par
all(c('p10','alpha') %in% modelfit@model_pars)==TRUE &&
!all(c('q','phi') %in% modelfit@model_pars==TRUE)
all(c('q','phi') %in% modelfit@model_pars)==TRUE &&
!all(c('p10','beta') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
modelfit@model_pars
'phi' %in% modelfit@model_pars && !all(c('q','alpha') %in% modelfit@model_pars)
pkgbuild::clean_dll()
pkgbuild::compile_dll()
devtools::load_all()
jointModel(gobyData,cov='None',family='poisson')
modelfit <- model1
rstan::extract(modelfit,pars='alpha')
merp <- rstan::extract(modelfit,pars='alpha')
merp <- rstan::extract(modelfit,pars='alpha')$alpha
lapply(rstan::extract(modelfit,pars='alpha')$alpha,'median')
beta_df <- lapply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
beta_df
lapply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
rstan::extract(modelfit,pars='alpha')$alpha
apply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
beta_df <- apply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
beta_df <- apply(rstan::extract(modelfit,pars='alpha')$alpha,2,'median')
alpha <- apply(rstan::extract(modelfit,pars='alpha')$alpha,2,'median')
cov.val <- 0
beta <- alpha %*% c(1,cov.val)
beta
exp(beta)
mu <- c(0.1,1)
i <- 1
p11 <- mu[i]/(mu[i]+exp(beta))
p11
alpha <- apply(rstan::extract(modelfit,pars='alpha')$alpha,2,'median')
alpha
alpha %*% c(1,cov.val)
beta <- unlist(alpha %*% c(1,cov.val))
beta
beta <- alpha %*% c(1,cov.val)
str(beta)
p11
p11*12
rbinom(1000,10,p11)
devtools::load_all()
detection.calculate(test3,mu=0.1)
summarize(test3)
modelfit <- test3
modelfit@model_pars
'phi' %in% modelfit@model_pars && !all(c('q','alpha') %in% modelfit@model_pars)
!all(c('q','alpha') %in% modelfit@model_pars)
c('q','alpha') %in% modelfit@model_pars
!all(c('q','phi','alpha') %in% modelfit@model_pars)
all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars
)
modelfit@model_pars
c('q','phi','alpha') %in% modelfit@model_pars
all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars)
modelfit@model_pars
c('q','phi','alpha') %in% modelfit@model_pars)
c('q','phi','alpha') %in% modelfit@model_pars
all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars)
all(c('phi','q') %in% modelfit@model_pars) && !c('alpha') %in% modelfit@model_pars
all(!c('q','phi','alpha') %in% modelfit@model_pars)
devtools::load_all()
detection.calculate(test3,mu=0.1)
detection.calculate(test2,mu=0.1,cov.val=c(0,0))
test2@model_pars
test2@par_dims
detection.calculate(test1,mu=0.1,cov.val=c(0))
modelfit <- test1
cov.val <- 0
mu <- 0.1
## #1. make sure model fit is of class stanfit
if(!is(modelfit,'stanfit')) {
errMsg = paste("modelfit must be of class 'stanfit'.")
print(errMsg)
}
## #2. make sure model fit is a joint model
if(all(!c('p10','beta') %in% modelfit@model_pars)) {
errMsg = paste("modelfit must be contain the following parameters: 'p10' and 'beta'")
print(errMsg)
}
## #3. make sure mu is a numeric vector
if(!is.numeric(mu)) {
errMsg = paste("mu must be a numeric vector")
print(errMsg)
}
## #4. make sure probability is a numeric value between 0 and 1
if(!is.numeric(probability) | length(probability)>1 | any(probability < 0) | any(probability > 1)) {
errMsg = paste("probability must be a numeric value between 0 and 1")
print(errMsg)
}
'phi' %in% modelfit@model_pars && all(!c('q','alpha') %in% modelfit@model_pars)
all(!c('q','phi','alpha') %in% modelfit@model_pars)
all(c('phi','q') %in% modelfit@model_pars) && !c('alpha') %in% modelfit@model_pars
'q' %in% modelfit@model_pars && all(!c('phi','alpha') %in% modelfit@model_pars)
all(c('phi','alpha') %in% modelfit@model_pars) && !c('q') %in% modelfit@model_pars
'alpha' %in% modelfit@modelpars && all(!c('q','phi') %in% modelfit@model_pars)
'alpha' %in% modelfit@modelpars
modelfit@modelpars
getwd()
saveRDS(test1,..eDNA_joint/practice/test1.rds)
saveRDS(test1,'../eDNA_joint/practice/test1.rds')
saveRDS(test1,'../eDNAjoint_practice/test1.rds')
saveRDS(test2,'../eDNAjoint_practice/test2.rds')
saveRDS(test3,'../eDNAjoint_practice/test3.rds')
devtools::check()
usethis::use_vignette("eDNAjoint")
devtools::install()
library(eDNAjoint)
help(gobyData)
help("greencrabData")
help(jointModel)
help(traditionalModel)
help(ggplot2)
help(modelselect)
help(mu.critical)
help(detection.calculate)
help(detection.plot)
help(summarize)
help(eDNAjoint::summarize)
test1 <- jointModel(data=gobyData,cov=c('Filter_time','Veg','Salinity'), family='poisson')
test2 <- jointModel(data=gobyData,cov=c('Other_fish','Hab_size'), family='poisson')
gobyData$site.cov
test2 <- jointModel(data=gobyData,cov=c('Other_fishes','Hab_size'), family='poisson')
modelselect(list(test1,test2))
test3 <- jointModel(data=gobyData,cov=c('Salinity','Veg'), family='poisson')
modelselect(list(test1,test2,test3))
test4 <- jointModel(data=gobyData,cov=c('Salinity','Filter_time'), family='poisson')
test4 <- jointModel(data=gobyData,cov='None', family='poisson')
test5 <- jointModel(data=gobyData,cov='Other_fishes', family='poisson')
modelselect(list(test1,test2,test3,test4,test5))
1245/240
1427/278
1245/240*1427
1245/1427
1245/1427*278
usethis::use_logo('../eDNAjoint_practice/eDNAjoint_logo.png', geometry = "242x278", retina = TRUE)
usethis::use_logo('../eDNAjoint_practice/eDNAjoint_logo.png', geometry = "242x278", retina = TRUE)
roxygen2::roxygenise(load_code = "source")
devtools::load_all()
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
devtools::load_all()
library(rstan)
sessionInfo()
packageVersion('rstan')
devtools::check()
devtools::load_all()
devtools::check()
requireNamespace("rstan")
if (!requireNamespace("rstan", quietly = TRUE))
if (!requireNamespace("rstan", quietly = TRUE)){
print ("The 'rstan' package is not installed.", call. = FALSE)
}
devtools::check()
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
test <- file.path(tempdir(),'eDNAjoint')
test
devtools::build_readme()
getwd()
usethis::use_readme_rmd()
browseVignettes(package='ggplot2')
browseVignettes(package='eDNAjoint')
devtools::build_readme()
devtools::load_all()
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
git rm --cached src/eDNAjoint.so
git rm --cached 'src/eDNAjoint.so'
ls
pwd
pkgbuild::compile_dll()
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages('bookdown')
help(detection.calculate)
library(eDNAjoint)
help(detection.calculate)
devtools::load_all()
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages('rstan')
install.packages("rstan")
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages("~/rstan_2.26.23.tar.gz", repos = NULL, type = "source")
install.packages('StanHeaders',type='source')
install.packages("StanHeaders", type = "source")
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages('rstan')
install.packages("rstan")
install.packages("~/rstan_2.26.23.tar.gz", repos = NULL, type = "source")
pkgbuild::clean_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
.Last.error
pkgbuild::clean_dll()
pkgbuild::compile_dll()
getwd()
mod <- stan_model('inst/stan/joint_catchability_negbin.stan')
library(rstan)
mod <- stan_model('inst/stan/joint_catchability_negbin.stan')
mod <- stan_model('inst/stan/joint_catchability_pois.stan')
mod <- stan_model('inst/stan/joint_cov_catchability_pois.stan')
mod <- stan_model('inst/stan/joint_cov_catchability_negbin.stan')
mod <- stan_model('inst/stan/joint_catchability_negbin.stan')
mod2 <- stan_model('inst/stan/joint_negbin.stan')
rm(mod)
mod <- stan_model('inst/stan/joint_catchability_negbin.stan')
pkgbuild::clean_dll()
pkgbuild::compile_dll()
mod <- stan_model('inst/stan/joint_catchability_pois.stan')
mod <- stan_model('inst/stan/joint_catchability_negbin.stan')
pkgbuild::clean_dll()
pkgbuild::compile_dll()
mod <- stan_model('inst/stan/joint_catchability_negbin.stan')
mod <- stan_model('inst/stan/joint_catchability_pois.stan')
rm(mod)
mod <- stan_model('inst/stan/joint_cov_catchability_pois.stan')
mod <- stan_model('inst/stan/joint_cov_catchability_negbin.stan')
mod <- stan_model('inst/stan/joint_cov_negbin.stan')
mod <- stan_model('inst/stan/joint_cov_pois.stan')
pkgbuild::clean_dll()
pkgbuild::compile_dll()
mod <- stan_model('inst/stan/joint_cov_catchability_negbin.stan')
mod <- stan_model('inst/stan/joint_cov_catchability_pois.stan')
mod <- stan_model('inst/stan/joint_cov_negbin.stan')
mod <- stan_model('inst/stan/joint_cov_pois.stan')
pkgbuild::clean_dll()
pkgbuild::compile_dll()
devtools::load_all()
data(gre)
data("greencrabData")
fit.q <- jointModel(data=greencrabData,cov='None',family='negbin',p10priors=c(1,20),q=TRUE)
summarize(fit.q)
summarize(fit.q,par='mu')
modelfit <- fit.q
cov.val <- 'None'
if(all(cov.val=='None')){
#extract posteriors for beta and p10 parameters
##beta
posterior_beta <- unlist(rstan::extract(modelfit, pars = "beta"))
#p10
posterior_p10 <- unlist(rstan::extract(modelfit, pars = "p10"))
} else {
#extract posteriors for beta and p10 parameters
##alpha
posterior_alpha <- rstan::extract(modelfit, pars = "alpha")$alpha
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
#p10
posterior_p10 <- unlist(rstan::extract(modelfit, pars = "p10"))
}
#calculate mu_critical -- gear type 1
critical_mu_1 <- rep(NA, length(posterior_beta))
for(i in 1:length(critical_mu_1)){
critical_mu_1[i] <- posterior_p10[i]*exp(posterior_beta[i])/(1-posterior_p10[i])
}
modelfit@par_dims
modelfit@par_dims$q
i <- 1
paste0('critical_mu_',i)
assign(paste("critical_mu_", "i+1", sep=""),rep(NA, length(posterior_beta)))
assign(paste("critical_mu_", i+1, sep=""),rep(NA, length(posterior_beta)))
#extract q values
posterior_q <- rstan::extract(modelfit, pars = "q")$q
posterior_q
for(i in 1:modelfit@par_dims$q){
assign(paste("critical_mu_", i+1, sep=""),critical_mu_1*posterior_q[,i])
}
critical_mu_2
out <- list(median=stats::median(critical_mu),
lower_ci=bayestestR::ci(critical_mu, method = 'HDI', ci = ci)[2],
upper_ci=bayestestR::ci(critical_mu, method = 'HDI', ci = ci)[3])
out <- list(median=stats::median(critical_mu_1),
lower_ci=bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2],
upper_ci=bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3])
ci <- 0.9
out <- list(median=stats::median(critical_mu_1),
lower_ci=bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2],
upper_ci=bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3])
out
assign(paste('out',i+1, sep=""),list(median=stats::median(paste0('critical_mu_',i+1)),
lower_ci=bayestestR::ci(paste0('critical_mu_',i+1), method = 'HDI', ci = ci)[2],
upper_ci=bayestestR::ci(paste0('critical_mu_',i+1), method = 'HDI', ci = ci)[3]))
paste0('critical_mu_',i+1)
stats::median(paste0('critical_mu_',i+1))
out1
out1 <- list(median=stats::median(critical_mu_1),
lower_ci=bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2],
upper_ci=bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3])
out1
assign(paste("median", i+1, sep=""),stats::mediancritical_mu_1*posterior_q[,i]))
assign(paste("median", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i]))
median_2
assign(paste("median_", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i]))
assign(paste("lower_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2])
assign(paste("upper_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3])
bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2]
list(assign(paste("median_", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i])),
assign(paste("lower_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2]),
assign(paste("upper_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3]))
list(paste("median_", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i]),
paste("lower_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2],
paste("upper_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3])
list(paste("median_", i+1, sep="")=stats::median(critical_mu_1*posterior_q[,i]),
paste("median_", i+1, sep="")
list(assign(paste("median_", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i])),
assign(paste("lower_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2]),
assign(paste("upper_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3]))
assign(paste("out_",i+1),list(assign(paste("median_", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i])),
assign(paste("lower_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2]),
assign(paste("upper_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3])))
`out_ 2`
assign(paste("out",i+1,sep=""),list(assign(paste("median_", i+1, sep=""),stats::median(critical_mu_1*posterior_q[,i])),
assign(paste("lower_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2]),
assign(paste("upper_ci_", i+1, sep=""),bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3])))
out2
#create empty dataframe
out <- as.data.frame(matrix(NA,nrow=3,ncol=modelfit@par_dims$q+1))
rownames(out) <- c('median','lower_ci','upper_ci')
out
gear_names <- paste('gear_',i+1,sep='')
gear_names
colnames(out) <- c('gear_1',gear_names)
out
out[,1] <- c(stats::median(critical_mu_1),
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2],
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3])
stats::median(critical_mu_1)
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]
test <- bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]
test[1]
test$CI_low
out[,1] <- c(stats::median(critical_mu_1),
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]$CI_low,
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3]$CI_high)
out
out[,1] <- c(round(stats::median(critical_mu_1),3),
round(bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]$CI_low,3),
round(bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3]$CI_high,3))
out
out[,1] <- c(round(stats::median(critical_mu_1),4),
round(bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]$CI_low,4),
round(bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3]$CI_high,4))
out
out[,1] <- c(round(stats::median(critical_mu_1),6),
round(bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]$CI_low,6),
round(bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3]$CI_high,6))
out
out[,1] <- c(stats::median(critical_mu_1),
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[2]$CI_low,
bayestestR::ci(critical_mu_1, method = 'HDI', ci = ci)[3]$CI_high)
out
#calculate mu_critical -- gear type 2+
for(i in 1:modelfit@par_dims$q){
out[,i+1] <- c(stats::median(stats::median(critical_mu_1*posterior_q[,i])),
bayestestR::ci(stats::median(critical_mu_1*posterior_q[,i]), method = 'HDI', ci = ci)[2]$CI_low,
bayestestR::ci(stats::median(critical_mu_1*posterior_q[,i]), method = 'HDI', ci = ci)[3]$CI_high)
}
stats::median(critical_mu_1*posterior_q[,i])
#calculate mu_critical -- gear type 2+
for(i in 1:modelfit@par_dims$q){
out[,i+1] <- c(stats::median(critical_mu_1*posterior_q[,i]),
bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[2]$CI_low,
bayestestR::ci(critical_mu_1*posterior_q[,i], method = 'HDI', ci = ci)[3]$CI_high)
}
out
devtools::load_all()
summarize(fit.q)
help(mu.critical)
mu.critical(fit.q,cov.val='None')
'q' %in% modelfit@model_pars
devtools::load_all()
mu.critical(fit.q)
detection.calculate(fit.q,mu=c(0.1,0.5,0.9))
detection.plot(fit.q,mu.min=0.1,mu.max=1)
summarize(fit.q,par='mu')
summarize(fit.q,par='mu').head()
mu.critical(fit.q)
devtools::load_all()
roxygen2::roxygenize()
devtools::install()
