K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nparams = length(q_names),
mat = as.matrix(count_all[,q_names]),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint_catchability(n.chain,count_all,q_names),
all(cov!='None') ~ init_joint_cov_catchability(n.chain,
count_all,q_names,cov))
)
} else if(q==FALSE){
##run model, no catchability
out <- rstan::sampling(dplyr::case_when(all(cov=='None') ~ stanmodels$joint_binary,
all(cov!='None') ~ stanmodels$joint_binary_cov),
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nsitecov = length(cov)+1,
mat_site = as.matrix(site_mat),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint(n.chain,count_all),
all(cov!='None') ~ init_joint_cov(n.chain,count_all,cov))
)
}
return(out)
}
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
jointModel <- function(data, cov='None', family='poisson', p10priors=c(1,20), q=FALSE,
n.chain=4, n.iter.burn=500,
n.iter.sample=2500, adapt_delta=0.9) {
####
# input checks
# all models
all_checks(data,cov,family,p10priors)
# model with catchability coefficients
if (q==TRUE) {
catchability_checks(data,cov)
}
# model without catchability coefficients
if (q==FALSE) {
no_catchability_checks(data,cov)
}
# model with covariates
if (all(cov!='None')) {
covariate_checks(data,cov)
}
if (!requireNamespace("rstan", quietly = TRUE)){
stop ("The 'rstan' package is not installed.", call. = FALSE)
}
###
#convert data to long format
'%>%' <- magrittr::`%>%`
#convert qPCR data to long format
qPCR_all <- as.data.frame(data$qPCR.N) %>%
dplyr::mutate(L=1:dim(data$qPCR.N)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='N') %>%
tidyr::drop_na()
qPCR.K_df <- as.data.frame(data$qPCR.K) %>%
dplyr::mutate(L=1:dim(data$qPCR.K)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='K') %>%
tidyr::drop_na()
qPCR_all$K <- qPCR.K_df$K
#convert count data to long format
count_all <- as.data.frame(data$count) %>%
dplyr::mutate(L=1:dim(data$count)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count') %>%
tidyr::drop_na()
#if q==TRUE, add count type data to count df
if(q==TRUE){
q_ref <- 1
count.type_df <- as.data.frame(data$count.type) %>%
dplyr::mutate(L=1:dim(data$count.type)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count.type') %>%
tidyr::drop_na()
count_all$count.type <- count.type_df$count.type
#create vector of q coefficient names
counttypes <- unique(count_all$count.type)
names <- counttypes[!counttypes==q_ref]
q_names <- paste0('q_',names)
#add dummy variables for count type
for(i in seq_along(q_names)){
count_all[,q_names[i]] <- ifelse(count_all$count.type==names[i],1,0)
}
}
#if present, prepare covariate data
if(all(cov!='None')){
site_mat <- as.data.frame(data$site.cov[,cov])
site_mat <- cbind(as.data.frame(rep(1,length(site_mat[,1]))),site_mat)
colnames(site_mat) <- c('int',cov)
}
#convert p10 prior
#p10 prior: convert beta(1,28) to lognormal distribution
#moment match from beta(alpha,beta) to normal(mu, sigma^2)
alpha <- p10priors[1]
beta <- p10priors[2]
mu <- alpha/(alpha+beta)
sigma_2 <- (alpha*beta)/((alpha+beta)^2*(alpha+beta+1))
#convert normal(mu, sigma^2) to lognormal(mu, sigma^2)
mu_ln <- log(mu^2/sqrt(mu^2+sigma_2))
sigma_2_ln <- log(1+sigma_2/mu^2)
sigma_ln <- sqrt(sigma_2_ln)
##run model, catchability
if(q==TRUE){
model <- dplyr::case_when(all(cov=='None') ~ stanmodels$joint_binary_catchability,
all(cov!='None') ~ stanmodels$joint_binary_cov_catchability)
out <- rstan::sampling(model,
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nparams = length(q_names),
mat = as.matrix(count_all[,q_names]),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint_catchability(n.chain,count_all,q_names),
all(cov!='None') ~ init_joint_cov_catchability(n.chain,
count_all,q_names,cov))
)
} else if(q==FALSE){
##run model, no catchability
model <- dplyr::case_when(all(cov=='None') ~ stanmodels$joint_binary,
all(cov!='None') ~ stanmodels$joint_binary_cov)
out <- rstan::sampling(model,
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nsitecov = length(cov)+1,
mat_site = as.matrix(site_mat),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint(n.chain,count_all),
all(cov!='None') ~ init_joint_cov(n.chain,count_all,cov))
)
}
return(out)
}
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
jointModel <- function(data, cov='None', family='poisson', p10priors=c(1,20), q=FALSE,
n.chain=4, n.iter.burn=500,
n.iter.sample=2500, adapt_delta=0.9) {
####
# input checks
# all models
all_checks(data,cov,family,p10priors)
# model with catchability coefficients
if (q==TRUE) {
catchability_checks(data,cov)
}
# model without catchability coefficients
if (q==FALSE) {
no_catchability_checks(data,cov)
}
# model with covariates
if (all(cov!='None')) {
covariate_checks(data,cov)
}
if (!requireNamespace("rstan", quietly = TRUE)){
stop ("The 'rstan' package is not installed.", call. = FALSE)
}
###
#convert data to long format
'%>%' <- magrittr::`%>%`
#convert qPCR data to long format
qPCR_all <- as.data.frame(data$qPCR.N) %>%
dplyr::mutate(L=1:dim(data$qPCR.N)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='N') %>%
tidyr::drop_na()
qPCR.K_df <- as.data.frame(data$qPCR.K) %>%
dplyr::mutate(L=1:dim(data$qPCR.K)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='K') %>%
tidyr::drop_na()
qPCR_all$K <- qPCR.K_df$K
#convert count data to long format
count_all <- as.data.frame(data$count) %>%
dplyr::mutate(L=1:dim(data$count)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count') %>%
tidyr::drop_na()
#if q==TRUE, add count type data to count df
if(q==TRUE){
q_ref <- 1
count.type_df <- as.data.frame(data$count.type) %>%
dplyr::mutate(L=1:dim(data$count.type)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count.type') %>%
tidyr::drop_na()
count_all$count.type <- count.type_df$count.type
#create vector of q coefficient names
counttypes <- unique(count_all$count.type)
names <- counttypes[!counttypes==q_ref]
q_names <- paste0('q_',names)
#add dummy variables for count type
for(i in seq_along(q_names)){
count_all[,q_names[i]] <- ifelse(count_all$count.type==names[i],1,0)
}
}
#if present, prepare covariate data
if(all(cov!='None')){
site_mat <- as.data.frame(data$site.cov[,cov])
site_mat <- cbind(as.data.frame(rep(1,length(site_mat[,1]))),site_mat)
colnames(site_mat) <- c('int',cov)
}
#convert p10 prior
#p10 prior: convert beta(1,28) to lognormal distribution
#moment match from beta(alpha,beta) to normal(mu, sigma^2)
alpha <- p10priors[1]
beta <- p10priors[2]
mu <- alpha/(alpha+beta)
sigma_2 <- (alpha*beta)/((alpha+beta)^2*(alpha+beta+1))
#convert normal(mu, sigma^2) to lognormal(mu, sigma^2)
mu_ln <- log(mu^2/sqrt(mu^2+sigma_2))
sigma_2_ln <- log(1+sigma_2/mu^2)
sigma_ln <- sqrt(sigma_2_ln)
##run model, catchability
if(q==TRUE){
model_index <- dplyr::case_when(all(cov=='None') ~ 1,
all(cov!='None') ~ 2)
out <- rstan::sampling(c(stanmodels$joint_binary_catchability,
stanmodels$joint_binary_cov_catchability)[model_index],
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nparams = length(q_names),
mat = as.matrix(count_all[,q_names]),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint_catchability(n.chain,count_all,q_names),
all(cov!='None') ~ init_joint_cov_catchability(n.chain,
count_all,q_names,cov))
)
} else if(q==FALSE){
##run model, no catchability
model_index <- dplyr::case_when(all(cov=='None') ~ 1,
all(cov!='None') ~ 2)
out <- rstan::sampling(c(stanmodels$joint_binary,
stanmodels$joint_binary_cov)[model_index],
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nsitecov = length(cov)+1,
mat_site = as.matrix(site_mat),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint(n.chain,count_all),
all(cov!='None') ~ init_joint_cov(n.chain,count_all,cov))
)
}
return(out)
}
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
test <- c(stanmodels$joint_binary_catchability,
stanmodels$joint_binary_cov_catchability)
test[1]
test[1][[1]]
test[2]
jointModel <- function(data, cov='None', family='poisson', p10priors=c(1,20), q=FALSE,
n.chain=4, n.iter.burn=500,
n.iter.sample=2500, adapt_delta=0.9) {
####
# input checks
# all models
all_checks(data,cov,family,p10priors)
# model with catchability coefficients
if (q==TRUE) {
catchability_checks(data,cov)
}
# model without catchability coefficients
if (q==FALSE) {
no_catchability_checks(data,cov)
}
# model with covariates
if (all(cov!='None')) {
covariate_checks(data,cov)
}
if (!requireNamespace("rstan", quietly = TRUE)){
stop ("The 'rstan' package is not installed.", call. = FALSE)
}
###
#convert data to long format
'%>%' <- magrittr::`%>%`
#convert qPCR data to long format
qPCR_all <- as.data.frame(data$qPCR.N) %>%
dplyr::mutate(L=1:dim(data$qPCR.N)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='N') %>%
tidyr::drop_na()
qPCR.K_df <- as.data.frame(data$qPCR.K) %>%
dplyr::mutate(L=1:dim(data$qPCR.K)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='K') %>%
tidyr::drop_na()
qPCR_all$K <- qPCR.K_df$K
#convert count data to long format
count_all <- as.data.frame(data$count) %>%
dplyr::mutate(L=1:dim(data$count)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count') %>%
tidyr::drop_na()
#if q==TRUE, add count type data to count df
if(q==TRUE){
q_ref <- 1
count.type_df <- as.data.frame(data$count.type) %>%
dplyr::mutate(L=1:dim(data$count.type)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count.type') %>%
tidyr::drop_na()
count_all$count.type <- count.type_df$count.type
#create vector of q coefficient names
counttypes <- unique(count_all$count.type)
names <- counttypes[!counttypes==q_ref]
q_names <- paste0('q_',names)
#add dummy variables for count type
for(i in seq_along(q_names)){
count_all[,q_names[i]] <- ifelse(count_all$count.type==names[i],1,0)
}
}
#if present, prepare covariate data
if(all(cov!='None')){
site_mat <- as.data.frame(data$site.cov[,cov])
site_mat <- cbind(as.data.frame(rep(1,length(site_mat[,1]))),site_mat)
colnames(site_mat) <- c('int',cov)
}
#convert p10 prior
#p10 prior: convert beta(1,28) to lognormal distribution
#moment match from beta(alpha,beta) to normal(mu, sigma^2)
alpha <- p10priors[1]
beta <- p10priors[2]
mu <- alpha/(alpha+beta)
sigma_2 <- (alpha*beta)/((alpha+beta)^2*(alpha+beta+1))
#convert normal(mu, sigma^2) to lognormal(mu, sigma^2)
mu_ln <- log(mu^2/sqrt(mu^2+sigma_2))
sigma_2_ln <- log(1+sigma_2/mu^2)
sigma_ln <- sqrt(sigma_2_ln)
##run model, catchability
if(q==TRUE){
model_index <- dplyr::case_when(all(cov=='None') ~ 1,
all(cov!='None') ~ 2)
out <- rstan::sampling(c(stanmodels$joint_binary_catchability,
stanmodels$joint_binary_cov_catchability)[model_index][[1]],
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nparams = length(q_names),
mat = as.matrix(count_all[,q_names]),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint_catchability(n.chain,count_all,q_names),
all(cov!='None') ~ init_joint_cov_catchability(n.chain,
count_all,q_names,cov))
)
} else if(q==FALSE){
##run model, no catchability
model_index <- dplyr::case_when(all(cov=='None') ~ 1,
all(cov!='None') ~ 2)
out <- rstan::sampling(c(stanmodels$joint_binary,
stanmodels$joint_binary_cov)[model_index][[1]],
data = list(
S = nrow(qPCR_all),
L = qPCR_all$L,
Nloc = length(unique(qPCR_all$L)),
N = qPCR_all$N,
K = qPCR_all$K,
C = nrow(count_all),
R = count_all$L,
E = count_all$count,
p10priors = c(mu_ln,sigma_ln),
nsitecov = length(cov)+1,
mat_site = as.matrix(site_mat),
include_phi = dplyr::case_when(family=='poisson' ~ 0,
family=='negbin' ~ 1),
control = list(adapt_delta = adapt_delta)
),
chains = n.chain,
thin = 1,
warmup = n.iter.burn,
iter = n.iter.burn + n.iter.sample,
init = dplyr::case_when(all(cov=='None') ~ init_joint(n.chain,count_all),
all(cov!='None') ~ init_joint_cov(n.chain,count_all,cov))
)
}
return(out)
}
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
fit.q = jointModel(data=greencrabData, cov='None', family='negbin',
p10priors=c(1,20), q=TRUE)
pkgbuild::clean_dll()
pkgbuild::compile_dll()
roxygen2::roxygenize()
devtools::install()
hist(rgamma(1000,shape=0.25,scale=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=1))
hist(rgamma(1000,shape=0.25,rate=0.25))
pkgbuild::clean_dll()
pkgbuild::compile_dll()
roxygen2::roxygenize()
devtools::load_all
devtools::load_all()
fit.q = jointModel(data=greencrabData, cov='None', family='negbin',
p10priors=c(1,20), q=TRUE)
devtools::install()
library(eDNAjoint)
fit.q = jointModel(data=greencrabData, cov='None', family='negbin',
p10priors=c(1,20), q=TRUE)
fit.q
data(greencrabData)
fit.q
fit.q = jointModel(data=greencrabData, cov='None', family='negbin',
p10priors=c(1,20), q=TRUE)
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
devtools::load_all()
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
library(eDNAjoint)
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
devtools::load_all()
devtools::load_all()
fit.cov = jointModel(data=gobyData, cov=c('Filter_time','Salinity'),
family='poisson', p10priors=c(1,20), q=FALSE)
