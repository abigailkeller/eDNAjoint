# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha_gamma = mu,
beta_gamma = rep(1,length(mu)),
p10 = log_p10,
beta = beta
)
names(inits[[1]]) <- c('alpha_gamma','beta_gamma','p10','beta')
# run model
fit <- suppressWarnings({jointModel(data = data, initial_values = inits,
family = 'gamma',
n.chain = 1, multicore = FALSE, seed = 10,
n.iter.burn = 25,
n.iter.sample = 75)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','beta') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite)
expect_true(is.numeric(mu_estimates))
## 7.
# model includes 'p10','q','phi','alpha'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
q <- 2
phi <- 10
# traditional type
count_type <- cbind(matrix(1, nrow = nsite, ncol = nobs_count/2),
matrix(2, nrow = nsite, ncol = nobs_count/2))
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rnbinom(n = 1, mu = mu[i], size = phi)
} else {
count[i,j] <- rnbinom(n = 1, mu = mu[i]*q, size = phi)
}
}
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# add NA to sites 2 and 4
count[c(2,4),] <- NA
count_type[c(2,4),] <- NA
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
count.type = count_type,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = log_p10,
alpha = alpha,
q = q,
phi = phi
)
names(inits[[1]]) <- c('mu','p10','alpha','q','phi'
)
# run model
fit <- suppressWarnings({jointModel(data = data, family = 'negbin', q = TRUE,
cov = c('var_a','var_b'),
n.chain = 1, multicore = FALSE, seed = 10,
initial_values = inits, adapt_delta = 0.99,
n.iter.burn = 25,
n.iter.sample = 75)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','q[1]','phi','alpha[1]') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite*2)
expect_true(is.numeric(mu_estimates))
## 8.
# model includes 'p10','alpha','q'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
q <- 2
# traditional type
count_type <- cbind(matrix(1, nrow = nsite, ncol = nobs_count/2),
matrix(2, nrow = nsite, ncol = nobs_count/2))
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rpois(n = 1, mu[i])
} else {
count[i,j] <- rpois(n = 1, mu[i]*q)
}
}
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# add NA to sites 2 and 4
count[c(2,4),] <- NA
count_type[c(2,4),] <- NA
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
count.type = count_type,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = log_p10,
alpha = alpha
)
names(inits[[1]]) <- c('mu','p10','alpha'
)
# run model
fit <- suppressWarnings({jointModel(data = data, q = TRUE,
cov = c('var_a','var_b'),
n.chain = 1, multicore = FALSE, seed = 10,
initial_values = inits, n.iter.burn = 25,
n.iter.sample = 75)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','q[1]','alpha[1]') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite*2)
expect_true(is.numeric(mu_estimates))
## 9.
# model includes 'p10','alpha','q', 'alpha_gamma', 'alpha_beta'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
q <- 2
beta_gamma <- 1
alpha_gamma <- mu * beta_gamma
# traditional type
count_type <- cbind(matrix(1, nrow = nsite, ncol = nobs_count/2),
matrix(2, nrow = nsite, ncol = nobs_count/2))
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
for(j in 1:nobs_count){
if(count_type[i,j]==1){
count[i,j] <- rgamma(1,shape = alpha_gamma[i],rate = beta_gamma)
} else {
count[i,j] <- rgamma(1,shape = alpha_gamma[i]*q,rate = beta_gamma)
}
}
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# add NA to sites 2 and 4
count[c(2,4),] <- NA
count_type[c(2,4),] <- NA
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
count.type = count_type,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha_gamma = mu,
beta_gamma = rep(1,length(mu)),
p10 = log_p10,
alpha = alpha,
q = q
)
names(inits[[1]]) <- c('alpha_gamma','beta_gamma','p10','alpha','q'
)
# run model
fit <- suppressWarnings({jointModel(data = data, q = TRUE, family = 'gamma',
cov = c('var_a','var_b'),
n.chain = 1, multicore = FALSE, seed = 10,
initial_values = inits, n.iter.burn = 25,
n.iter.sample = 75
)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','q[1]','alpha[1]') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite*2)
expect_true(is.numeric(mu_estimates))
## 10.
# model includes 'p10','phi','alpha'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
phi <- 10
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
count[i,] <- rnbinom(n = nobs_count, mu = mu[i], size = phi)
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# add NA to sites 2 and 4
count[c(2,4),] <- NA
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = log_p10,
alpha = alpha,
phi = phi
)
names(inits[[1]]) <- c('mu','p10','alpha',
'phi')
# run model
fit <- suppressWarnings({jointModel(data = data, family = 'negbin',
cov = c('var_a','var_b'),n.iter.burn = 25,
n.iter.sample = 75,
n.chain = 1, multicore = FALSE, seed = 10,
initial_values = inits)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','phi','alpha[1]') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite)
expect_true(is.numeric(mu_estimates))
## 11.
# model includes 'p10','alpha'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
count[i,] <- rpois(nobs_count, mu[i])
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# add NA to sites 2 and 4
count[c(2,4),] <- NA
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
mu = mu,
p10 = log_p10,
alpha = alpha
)
names(inits[[1]]) <- c('mu','p10','alpha'
)
# run model
fit <- suppressWarnings({jointModel(data = data,
cov = c('var_a','var_b'),
n.chain = 1, multicore = FALSE, seed = 10,
initial_values = inits, n.iter.burn = 25,
n.iter.sample = 75)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','alpha[1]') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite)
expect_true(is.numeric(mu_estimates))
## 12.
# model includes 'p10','alpha','alpha_gamma','beta_gamma'
# constants
nsite <- 20
nobs_count <- 100
nobs_pcr <- 8
# params
mu <- rlnorm(nsite, meanlog = log(1), sdlog = 1)
alpha <- c(0.5, 0.1, -0.4)
log_p10 <- -4.5
beta_gamma <- 1
alpha_gamma <- mu * beta_gamma
# count
count <- matrix(NA, nrow = nsite, ncol = nobs_count)
for(i in 1:nsite){
count[i,] <- rgamma(nobs_count,shape = alpha_gamma[i],rate = beta_gamma)
}
# site-level covariates
mat_site <- matrix(NA, nrow = nsite, ncol = length(alpha))
mat_site[,1] <- 1 # intercept
for(i in 2:length(alpha)){
mat_site[,i] <- rnorm(nsite,0,1)
}
colnames(mat_site) <- c('int','var_a','var_b')
# p11 (probability of true positive eDNA detection) and p (probability
# of eDNA detection)
p11 <- rep(NA,nsite)
p <- rep(NA,nsite)
for (i in 1:nsite){
p11[i] <- mu[i] / (mu[i] + exp(sum(mat_site[i,]*alpha)))
p[i] <- min(p11[i] + exp(log_p10),1)
}
# qPCR.N (# qPCR observations)
qPCR.N <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for(i in 1:nsite){
qPCR.N[i,] <- rep(3,nobs_pcr)
}
# qPCR.K (# positive qPCR detections)
qPCR.K <- matrix(NA, nrow = nsite, ncol = nobs_pcr)
for (i in 1:nsite){
qPCR.K[i,] <- rbinom(nobs_pcr, qPCR.N[i,], rep(p[i],nobs_pcr))
}
# add NA to sites 2 and 4
count[c(2,4),] <- NA
# collect data
data <- list(
qPCR.N = qPCR.N,
qPCR.K = qPCR.K,
count = count,
site.cov = mat_site
)
# initial values
inits <- list()
inits[[1]] <- list(
alpha_gamma = mu,
beta_gamma = rep(1,length(mu)),
p10 = log_p10,
alpha = alpha
)
names(inits[[1]]) <- c('alpha_gamma','beta_gamma','p10','alpha'
)
# run model
fit <- suppressWarnings({jointModel(data = data,family = 'gamma',
cov = c('var_a','var_b'),
n.chain = 1, multicore = FALSE, seed = 10,
initial_values = inits, n.iter.burn = 25,
n.iter.sample = 75)})
# get output params
output_params <- rownames(as.data.frame(jointSummarize(fit$model)))
# test expectation
expect_true(all(c('p10','alpha[1]') %in% output_params))
# check length of of mu
mu_estimates <- as.vector(rstan::summary(fit$model,par='mu')$summary[,1])
expect_equal(length(mu_estimates),nsite)
expect_true(is.numeric(mu_estimates))
devtools::install()
