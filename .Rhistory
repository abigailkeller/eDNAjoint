if(q==TRUE){
count.type_df <- as.data.frame(data$count.type) %>%
dplyr::mutate(L=1:dim(data$count.type)[1]) %>%
tidyr::pivot_longer(cols=!L,values_to='count.type') %>%
tidyr::drop_na()
count_all$count.type <- count.type_df$count.type
#create vector of q coefficient names
counttypes <- unique(count_all$count.type)
names <- counttypes[!counttypes==q_ref]
q_names <- paste0('q_',names)
#add dummy variables for count type
for(i in seq_along(q_names)){
count_all[,q_names[i]] <- ifelse(count_all$count.type==names[i],1,0)
}
}
#if present, prepare covariate data
if(all(cov!='None')){
site_mat <- as.data.frame(data$site.cov[,cov])
site_mat <- cbind(as.data.frame(rep(1,length(site_mat[,1]))),site_mat)
colnames(site_mat) <- c('int',cov)
}
devtools::load_all()
test1 <- jointModel(gobyData,cov='Filter_time',family='poisson',q=FALSE)
test1 <- jointModel(greencrabData,cov='None',family='poisson',q=FALSE)
test1 <- jointModel(greencrabData,cov='None',family='negbin',q=FALSE)
test1 <- jointModel(greencrabData,cov='None',family='negbin',q=TRUE,q_ref=1)
test1 <- jointModel(greencrabData,cov='None',family='poisson',q=TRUE,q_ref=1)
test1 <- jointModel(gobyData,cov='None',family='poisson',q=FALSE)
test1 <- jointModel(gobyData,cov='Filter_time',family='poisson',q=FALSE)
devtools::load_all()
test1 <- jointModel(gobyData,cov='Filter_time',family='poisson',q=FALSE)
length(cov)+1
as.matrix(site_mat)
length(cov)+1
devtools::load_all()
test1 <- jointModel(gobyData,cov='Filter_time',family='poisson',q=FALSE)
test1 <- jointModel(gobyData,cov=c('Filter_time','Hab_size'),family='poisson',q=FALSE)
test1 <- jointModel(gobyData,cov=c('Filter_time','Hab_size'),family='negbin',q=FALSE)
test1 <- jointModel(gobyData,cov=c('Filter_time','Hab_size'),family='negativebin',q=FALSE)
jointModel(gobyData,cov=c('Filter_time','Hab_size'),family='negativebin',q=FALSE)
jointModel(gobyData,cov=c('Filter_time','Hab_size'),family='negativebin',q=FALSE,p10priors=1)
devtools::load_all()
data("greencrabData")
data("gobyData")
jointModel(data=gobyData,cov='Filter_time',family='pois',q=FALSE)
jointModel(data=gobyData,cov='Filter_time',family='poisson',p10priors=1,q=FALSE)
jointModel(data=gobyData,cov='Filter',family='poisson',p10priors=1,q=FALSE)
jointModel(data=gobyData,cov='Filter',family='poisson',q=FALSE)
test1 <- jointModel(data=gobyData,cov='Filter',family='poisson',q=FALSE)
test1 <- jointModel(data=gobyData,cov='Filter_time',family='poisson',q=FALSE)
test2 <- jointModel(data=gobyData,cov=c('Filter_time','Hab_size'),family='poisson',q=FALSE)
is(test1,'stanfit')
!is(test1,'stanfit')
modelfits <- list(test1,test2)
is(modelfits,'stanfit')
modelfits[[1]]
summary(test1,par='p10')
rstan::summary(test1,par='p10')
rstan::summary(test1,par='p10')$summary
class(modelfits[[1]])
## #2. make sure all data objects are of class stanfit
test <- function(modelfit){is(modelfit,'stanfit')}
lapply(modelfits,test)
all(lapply(modelfits,test)==TRUE)
!all(lapply(modelfits,test)==TRUE)
## #3. make sure all models are of the same type
type <- function(modelfit){'p10'%in%modelfit@modelpars}
lapply(modelfits,type)
## #3. make sure all models are of the same type
type <- function(modelfit){'p10'%in%modelfit@model_pars}
lapply(modelfits,type)
all(lapply(modelfits,type)==TRUE)
all(lapply(modelfits,type)!=TRUE)
all(lapply(modelfits,type)!=FALSE)
length(unique(lapply(modelfits,type)))
length(unique(lapply(modelfits,type)))!=1
devtools::load_all()
modelselect(modelfits=list(test1,test2))
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
devtools::load_all()
modelselect(list(test1,test2))
summarize(test1)
summarize(test1,par='beta')
summarize(test1,par='alpha')
summarize(test1,par='p10')
summarize(test1,par='p10',digits=6)
test3 <- jointModel(data=greencrabData,cov='None',family='negbin',q=TRUE,q_ref=1)
devtools::load_all()
summarize(test3)
test1@model_pars
test1@model_dim
test1@par_dims
test1@par_dims$alpha
summarize(test3,par='alpha')
summarize(test3,par='beta')
devtools::load_all()
summarize(test1)
summarize(test1,par='p10')
summarize(test1,par=c('p10','alpha'))
summarize(test3)
summarize(test3,par=c('p10','beta'))
test3 <- modelfit
modelfit <- test3
all(c('p10','q','phi','beta') %in% modelfit@model_pars)==TRUE
all(c('p10','q','phi','beta') %in% modelfit@model_pars)==TRUE &&
!c('alpha') %in% modelfit@model_pars &&
all(par == 'all')
par <- c('p10','beta')
all(c('p10','q','phi','beta') %in% modelfit@model_pars)==TRUE &&
!c('alpha') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','beta','q') %in% modelfit@model_pars)==TRUE &&
all(!c('phi','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
all(c('p10','beta','q') %in% modelfit@model_pars)==TRUE
all(!c('phi','alpha') %in% modelfit@model_pars)
!all(c('phi','alpha') %in% modelfit@model_pars)
modelfit@model_pars
all(c('phi','alpha') %in% modelfit@model_pars)
!all(c('phi','alpha') %in% modelfit@model_pars)
all(!c('phi','alpha') %in% modelfit@model_pars)
all(c('p10','beta','q') %in% modelfit@model_pars)==TRUE &&
!all(c('phi','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
all(c('p10','beta','q') %in% modelfit@model_pars)==TRUE &&
!all(c('phi','alpha') %in% modelfit@model_pars)
modelfit@model_pars
!all(c('phi','alpha') %in% modelfit@model_pars)
all(par == 'all')
devtools::load_all()
summarize(test1)
summarize(test1,par=c('alpha'))
summarize(test3)
summarize(test3,par='beta')
modelfit <- test3
all(c('p10','phi','alpha') %in% modelfit@model_pars)==TRUE
c('p10','phi','alpha') %in% modelfit@model_pars
modelfit@model_pars
all(c('p10','phi','alpha') %in% modelfit@model_pars)==TRUE &&
!c('q') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','phi','beta') %in% modelfit@model_pars)==TRUE &&
!all(c('q','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
devtools::load_all()
summarize(test3)
summarize(test3,par='p10')
summarize(test3,par=c('p10','beta'))
summarize(test3,par=c('p10','beta','q'))
exp(1.219)
install.packages('bayestestR')
summarize(test3)
posterior_beta <- unlist(extract(modelfit, pars = "beta"))
posterior_p10 <- unlist(extract(modelfit, pars = "p10"))
#calculate mu_critical
critical_mu <- rep(NA, length(posterior_beta))
merp <- rstan::extract(modelfit, pars = "alpha")
modelfit <- test1
merp <- rstan::extract(modelfit, pars = "alpha")
merp <- rstan::extract(modelfit, pars = "alpha")$alpha
cov.val <- c(0,1)
##beta
posterior_beta <- posterior_alpha %*% cov.val
#extract posteriors for beta and p10 parameters
##alpha
posterior_alpha <- rstan::extract(modelfit, pars = "alpha")$alpha
##beta
posterior_beta <- posterior_alpha %*% cov.val
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
cov.val <- 1
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
posterior_alpha[1,1]*1+posterior_alpha[1,2]*1
posterior_beta[1]
posterior_alpha[4,1]*1+posterior_alpha[4,2]*1
posterior_beta[4]
devtools::load_all()
mu.critical(test1)
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
devtools::load_all()
mu.critical(test1)
mu.critical(test1,cov.val=c(0))
vec <- c(0)
is.numeric(vec)
mu.critical(test1,cov.val=c(0,0))
devtools::load_all()
mu.critical(test1,cov.val=c(0,0))
devtools::load_all()
summarize(test1,par='alpha')
mu.critical(test1,cov.val=c(0,0))
modelfit <- test1
#extract posteriors for beta and p10 parameters
##alpha
posterior_alpha <- rstan::extract(modelfit, pars = "alpha")$alpha
cov.val <- c(0,0)
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
c(1,cov.val)
cov.val <- c(0)
##beta
posterior_beta <- posterior_alpha %*% c(1,cov.val)
all(cov.val != 'None')
length(cov.val)!=(length(modelfit@par_dims$alpha)+1)
all(cov.val != 'None') && length(cov.val)!=(length(modelfit@par_dims$alpha)+1)
cov.val
rm(merp)
rm(posterior_alpha)
rm(posterior_beta)
rm(cov.val)
rm(critical_mu)
rm(par)
rm(posterior_p10)
rm(vec)
devtools::load_all()
summarize(test1,par='alpha')
devtools::load_all()
mu.critical(test1)
mu.critical(test1,cov.val=c(0,0))
mu.critical(test1,cov.val=c(0,1))
mu.critical(test1,cov.val=c(0))
is.numeric(c(0,0))
!is.numeric(c(0,0))
cov.val <- c(0,0)
all(cov.val != 'None') && !is.numeric(cov.val)
all(cov.val != 'None')
length(cov.val)
modelfit <- test1
length(modelfit@par_dims$alpha)
modelfit@par_dims$alpha
modelfit@par_dims$alpha
modelfit@par_dims$alpha-1
devtools::load_all()
mu.critical(test1,cov.val=c(0,0))
mu.critical(test1,cov.val=c(0))
mu.critical(test1,cov.val=0
)
mu.critical(test1,cov.val=0.5)
mu.critical(test1,cov.val=-0.5)
mu.critical(test2, cov.val=c(0,0))
mu.critical(test2, cov.val=c(0,1))
mu.critical(test3,cov.val=0)
devtools::load_all()
mu.critical(test3,cov.val=0)
modelfit <- test3
summary(modelfit)
summarize(modelfit)
all(cov.val != 'None')
c('alpha') %in% modelfit@model_pars
!c('alpha') %in% modelfit@model_pars
all(cov.val != 'None') && !c('alpha') %in% modelfit@model_pars
devtools::load_all()
mu.critical(test3,cov.val=0)
mu.critical(test3,cov.val='None')
!(all(c('phi','alpha') %in% modelfit@model_pars)
)
!(all(c('phi','alpha') %in% modelfit@model_pars))
all(!c('phi','alpha') %in% modelfit@model_pars)
list1 <- c('a','b','c')
list2 <- c('a','b')
list2 %in% list1
all(list2 %in% list1)
!all(list2 %in% list1)
all!(list2 %in% list1)
all(list2 %in% list1)
all(!list2 %in% list1)
all(c('a','b') %in% list1)
all(!c('a','b') %in% list1)
!all(c('a','b') %in% list1)
!(all(c('phi','alpha') %in% modelfit@model_pars)
)
all(c('phi','alpha') %in% modelfit@model_pars)
!(all(c('phi','alpha') %in% modelfit@model_pars))
all(!c('phi','alpha') %in% modelfit@model_pars)
modelfit <- test1
modelfit@model_pars
all(c('p10','q','phi','beta') %in% modelfit@model_pars)==TRUE &&
!c('alpha') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','beta','q') %in% modelfit@model_pars)==TRUE &&
!all(c('phi','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
all(c('p10','phi','beta') %in% modelfit@model_pars)==TRUE &&
!all(c('q','alpha') %in% modelfit@model_pars) &&
all(par == 'all')
all(c('p10','beta') %in% modelfit@model_pars)==TRUE &&
!all(c('q','phi','alpha') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
all(c('p10','q','phi','alpha') %in% modelfit@model_pars)==TRUE &&
all(par == 'all')
all(c('p10','alpha','q') %in% modelfit@model_pars)==TRUE &&
!c('phi') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','phi','alpha') %in% modelfit@model_pars)==TRUE &&
!c('q') %in% modelfit@model_pars &&
all(par == 'all')
all(c('p10','alpha') %in% modelfit@model_pars)==TRUE &&
!all(c('q','phi') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
par
all(c('p10','alpha') %in% modelfit@model_pars)==TRUE &&
!all(c('q','phi') %in% modelfit@model_pars==TRUE)
all(c('q','phi') %in% modelfit@model_pars)==TRUE &&
!all(c('p10','beta') %in% modelfit@model_pars==TRUE) &&
all(par == 'all')
modelfit@model_pars
'phi' %in% modelfit@model_pars && !all(c('q','alpha') %in% modelfit@model_pars)
pkgbuild::clean_dll()
pkgbuild::compile_dll()
devtools::load_all()
jointModel(gobyData,cov='None',family='poisson')
modelfit <- model1
rstan::extract(modelfit,pars='alpha')
merp <- rstan::extract(modelfit,pars='alpha')
merp <- rstan::extract(modelfit,pars='alpha')$alpha
lapply(rstan::extract(modelfit,pars='alpha')$alpha,'median')
beta_df <- lapply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
beta_df
lapply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
rstan::extract(modelfit,pars='alpha')$alpha
apply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
beta_df <- apply(rstan::extract(modelfit,pars='alpha')$alpha,1,'median')
beta_df <- apply(rstan::extract(modelfit,pars='alpha')$alpha,2,'median')
alpha <- apply(rstan::extract(modelfit,pars='alpha')$alpha,2,'median')
cov.val <- 0
beta <- alpha %*% c(1,cov.val)
beta
exp(beta)
mu <- c(0.1,1)
i <- 1
p11 <- mu[i]/(mu[i]+exp(beta))
p11
alpha <- apply(rstan::extract(modelfit,pars='alpha')$alpha,2,'median')
alpha
alpha %*% c(1,cov.val)
beta <- unlist(alpha %*% c(1,cov.val))
beta
beta <- alpha %*% c(1,cov.val)
str(beta)
p11
p11*12
rbinom(1000,10,p11)
devtools::load_all()
detection.calculate(test3,mu=0.1)
summarize(test3)
modelfit <- test3
modelfit@model_pars
'phi' %in% modelfit@model_pars && !all(c('q','alpha') %in% modelfit@model_pars)
!all(c('q','alpha') %in% modelfit@model_pars)
c('q','alpha') %in% modelfit@model_pars
!all(c('q','phi','alpha') %in% modelfit@model_pars)
all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars
)
modelfit@model_pars
c('q','phi','alpha') %in% modelfit@model_pars
all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars)
modelfit@model_pars
c('q','phi','alpha') %in% modelfit@model_pars)
c('q','phi','alpha') %in% modelfit@model_pars
all(c('q','phi','alpha') %in% modelfit@model_pars)
!all(c('q','phi','alpha') %in% modelfit@model_pars)
all(c('phi','q') %in% modelfit@model_pars) && !c('alpha') %in% modelfit@model_pars
all(!c('q','phi','alpha') %in% modelfit@model_pars)
devtools::load_all()
detection.calculate(test3,mu=0.1)
detection.calculate(test2,mu=0.1,cov.val=c(0,0))
test2@model_pars
test2@par_dims
detection.calculate(test1,mu=0.1,cov.val=c(0))
modelfit <- test1
cov.val <- 0
mu <- 0.1
## #1. make sure model fit is of class stanfit
if(!is(modelfit,'stanfit')) {
errMsg = paste("modelfit must be of class 'stanfit'.")
print(errMsg)
}
## #2. make sure model fit is a joint model
if(all(!c('p10','beta') %in% modelfit@model_pars)) {
errMsg = paste("modelfit must be contain the following parameters: 'p10' and 'beta'")
print(errMsg)
}
## #3. make sure mu is a numeric vector
if(!is.numeric(mu)) {
errMsg = paste("mu must be a numeric vector")
print(errMsg)
}
## #4. make sure probability is a numeric value between 0 and 1
if(!is.numeric(probability) | length(probability)>1 | any(probability < 0) | any(probability > 1)) {
errMsg = paste("probability must be a numeric value between 0 and 1")
print(errMsg)
}
'phi' %in% modelfit@model_pars && all(!c('q','alpha') %in% modelfit@model_pars)
all(!c('q','phi','alpha') %in% modelfit@model_pars)
all(c('phi','q') %in% modelfit@model_pars) && !c('alpha') %in% modelfit@model_pars
'q' %in% modelfit@model_pars && all(!c('phi','alpha') %in% modelfit@model_pars)
all(c('phi','alpha') %in% modelfit@model_pars) && !c('q') %in% modelfit@model_pars
'alpha' %in% modelfit@modelpars && all(!c('q','phi') %in% modelfit@model_pars)
'alpha' %in% modelfit@modelpars
modelfit@modelpars
getwd()
saveRDS(test1,..eDNA_joint/practice/test1.rds)
saveRDS(test1,'../eDNA_joint/practice/test1.rds')
saveRDS(test1,'../eDNAjoint_practice/test1.rds')
saveRDS(test2,'../eDNAjoint_practice/test2.rds')
saveRDS(test3,'../eDNAjoint_practice/test3.rds')
devtools::check()
usethis::use_vignette("eDNAjoint")
devtools::install()
library(eDNAjoint)
help(gobyData)
help("greencrabData")
help(jointModel)
help(traditionalModel)
help(ggplot2)
help(modelselect)
help(mu.critical)
help(detection.calculate)
help(detection.plot)
help(summarize)
help(eDNAjoint::summarize)
test1 <- jointModel(data=gobyData,cov=c('Filter_time','Veg','Salinity'), family='poisson')
test2 <- jointModel(data=gobyData,cov=c('Other_fish','Hab_size'), family='poisson')
gobyData$site.cov
test2 <- jointModel(data=gobyData,cov=c('Other_fishes','Hab_size'), family='poisson')
modelselect(list(test1,test2))
test3 <- jointModel(data=gobyData,cov=c('Salinity','Veg'), family='poisson')
modelselect(list(test1,test2,test3))
test4 <- jointModel(data=gobyData,cov=c('Salinity','Filter_time'), family='poisson')
test4 <- jointModel(data=gobyData,cov='None', family='poisson')
test5 <- jointModel(data=gobyData,cov='Other_fishes', family='poisson')
modelselect(list(test1,test2,test3,test4,test5))
1245/240
1427/278
1245/240*1427
1245/1427
1245/1427*278
usethis::use_logo('../eDNAjoint_practice/eDNAjoint_logo.png', geometry = "242x278", retina = TRUE)
usethis::use_logo('../eDNAjoint_practice/eDNAjoint_logo.png', geometry = "242x278", retina = TRUE)
roxygen2::roxygenise(load_code = "source")
devtools::load_all()
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
devtools::load_all()
library(rstan)
sessionInfo()
packageVersion('rstan')
devtools::check()
devtools::load_all()
devtools::check()
requireNamespace("rstan")
if (!requireNamespace("rstan", quietly = TRUE))
if (!requireNamespace("rstan", quietly = TRUE)){
print ("The 'rstan' package is not installed.", call. = FALSE)
}
devtools::check()
roxygen2::roxygenise(load_code = "source")
roxygen2::roxygenise(load_code = "source")
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
test <- file.path(tempdir(),'eDNAjoint')
test
devtools::build_readme()
getwd()
usethis::use_readme_rmd()
browseVignettes(package='ggplot2')
browseVignettes(package='eDNAjoint')
devtools::build_readme()
devtools::load_all()
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
git rm --cached src/eDNAjoint.so
git rm --cached 'src/eDNAjoint.so'
ls
pwd
pkgbuild::compile_dll()
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages('bookdown')
help(detection.calculate)
library(eDNAjoint)
help(detection.calculate)
devtools::load_all()
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages('rstan')
install.packages("rstan")
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages("~/rstan_2.26.23.tar.gz", repos = NULL, type = "source")
install.packages('StanHeaders',type='source')
install.packages("StanHeaders", type = "source")
pkgbuild::clean_dll()
pkgbuild::compile_dll()
install.packages('rstan')
install.packages("rstan")
install.packages("~/rstan_2.26.23.tar.gz", repos = NULL, type = "source")
pkgbuild::clean_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
.Last.error
