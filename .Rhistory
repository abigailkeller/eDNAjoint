errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase1.html#prepare-the-data')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
}
# input checks if site-level covariates are used
covariate_checks <- function(data,cov){
## make sure site.cov is not zero-length
#' @srrstats {G5.8,G5.8a} Pre-processing routines to check for zero-length
#'   data
if (dim(data$site.cov)[1] == 0) {
errMsg1 <- "site.cov contains zero-length data."
errMsg2 <- 'See the eDNAjoint guide for data formatting help: '
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase2.html')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## make sure no column is entirely NA in site.cov
#' @srrstats {G5.8,G5.8c} Pre-processing routines to check for column with
#'   all NA
if (any(apply(data$site.cov, 2, function(col) all(is.na(col))))) {
errMsg1 <- "site.cov contains a column with all NA."
errMsg2 <- 'See the eDNAjoint guide for data formatting help: '
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase2.html')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## site.cov is numeric, if present
#' @srrstats {G5.8,G5.8b} Pre-processing routines to check for data of
#'   unsupported type
if(!is.numeric(data$site.cov)){
errMsg1 <- "site.cov should be numeric."
errMsg2 <- 'See the eDNAjoint guide for data formatting help: '
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase2.html')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## make sure no data are undefined
#' @srrstats {G2.16} Pre-processing routines to check for undefined data
if(any(data$site.cov == Inf) | any(data$site.cov == -Inf)){
errMsg1 <- "site.cov contains undefined values (i.e., Inf or -Inf)"
errMsg2 <- 'See the eDNAjoint guide for data formatting help: '
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase2.html')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## cov values match column names in site.cov
if(!all(cov %in% colnames(data$site.cov))){
errMsg1 <- paste0("cov values should be listed in the column names of ",
"site.cov in the data.")
errMsg2 <- 'See the eDNAjoint guide for data formatting help: '
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase2.html')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## site.cov has same number of rows as qPCR.N and count, if present
#' @srrstats {BS2.1} Pre-processing routines to ensure all input data is
#'   dimensionally commensurate
if(dim(data$qPCR.N)[1] != dim(data$site.cov)[1]){
errMsg1 <- paste0("The number of rows in site.cov matrix should match the ",
"number of rows in all other matrices.")
errMsg2 <- 'See the eDNAjoint guide for data formatting help: '
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette',
'/usecase2.html')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## add warning if number of covariates is greater than the number of sites
#' @srrstats {G5.8d} Pre-processing routines to check if data is outside
#'   scope of algorithm (i.e., # site-level covariates is greater than the
#'   number of sites)
if(length(cov)>dim(data$site.cov)[2]){
warnMsg <- paste0("The number of site-level covariates exceeds the number ",
"of sites (i.e., n < p).")
warning(warnMsg)
}
## add warning if number of site-covariate data has perfect collinearity
#' @srrstats {BS3.1} Pre-processing routines to check if site covariate
#'   data has perfect collinearity
rank_mat <- qr(data$site.cov)$rank
if(rank_mat < ncol(data$site.cov)){
warnMsg <- "Data in site.cov exhibits perfect collinearity."
warning(warnMsg)
}
}
# checks if initial values are provided
initial_values_checks <- function(initial_values,data,cov,n.chain){
## length of initial values is equal to the number of chains
if(length(initial_values) != n.chain){
errMsg1 <- paste0("The length of the list of initial values should equal ",
"the number of chains (n.chain, default is 4).")
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
for(i in 1:n.chain){
## check mu input
if('mu' %in% names(initial_values[[i]])){
## if mu is numeric
if(any(!is.numeric(initial_values[[i]]$mu)) |
any(initial_values[[i]]$mu < 0)){
errMsg1 <- "Initial values for 'mu' should be numeric values > 0."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## check mu length
if(length(initial_values[[i]]$mu) != dim(data$count)[1]){
errMsg1 <- paste0("The length of initial values for 'mu' should equal ",
"the number of sites.")
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
}
## check p10 input
if('p10' %in% names(initial_values[[i]])){
## if p10 is numeric
if(!is.numeric(initial_values[[i]]$p10)){
errMsg1 <- "Initial values for 'p10' should be numeric."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## check p10 length
if(length(initial_values[[i]]$p10) != 1){
errMsg1 <- "The length of initial values for 'p10' should equal 1."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
}
## check beta input
if('beta' %in% names(initial_values[[i]])){
## if beta is numeric
if(!is.numeric(initial_values[[i]]$beta)){
errMsg1 <- "Initial values for 'beta' should be numeric."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## check beta length
if(length(initial_values[[i]]$beta) != 1){
errMsg1 <- "The length of initial values for 'beta' should equal 1."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
}
## check alpha input
if('alpha' %in% names(initial_values[[i]])){
## if alpha is numeric
if(any(!is.numeric(initial_values[[i]]$alpha))){
errMsg1 <- "Initial values for 'alpha' should be numeric."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase2.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## check alpha length
if(length(initial_values[[i]]$alpha) != (length(cov)+1)){
errMsg1 <- paste0("The length of initial values for 'alpha' should ",
"equal: # covariates + 1 (i.e., including intercept).")
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase2.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
}
## check q input
if('q' %in% names(initial_values[[i]])){
## if q is numeric
if(any(!is.numeric(initial_values[[i]]$q)) |
any(initial_values[[i]]$q < 0)){
errMsg1 <- "Initial values for 'q' should be numeric."
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
## check q length
if(length(initial_values[[i]]$q) != (length(table(data$count.type))-1)){
errMsg1 <- paste0("The length of initial values for 'q' should equal:",
" # unique gear types - 1 (i.e., q for reference ",
"type = 1).")
errMsg2 <- paste0('See the eDNAjoint guide for help formatting ',
'initial values: ')
errMsg3 <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_',
'vignette/usecase1.html#initialvalues')
errMsg <- paste(errMsg1,errMsg2,errMsg3, sep = "\n")
stop(errMsg)
}
}
}
}
# make character inputs case-insensitive
#' @srrstats {G2.3b} Allow case-insensitive character parameter values
family <- tolower(family)
# get phipriors
if(family != 'negbin'){
phipriors <- NULL
} else if(family == 'negbin' && is.null(phipriors)){
phipriors <- c(0.25,0.25)
} else if(family == 'negbin' && !is.null(phipriors)){
phipriors <- phipriors
}
if (q == TRUE) {
# model with catchability coefficients
catchability_checks(data,cov)
} else {
# model without catchability coefficients
no_catchability_checks(data,cov)
}
# model with covariates
if (all(!is.null(cov))) {
covariate_checks(data,cov)
}
# all models
all_checks(data,cov,family,p10priors,phipriors,n.chain,n.iter.burn,
n.iter.sample,thin,adapt_delta,seed)
# initial value checks
if(all(!is.null(initial_values))){
initial_values_checks(initial_values,data,cov,n.chain)
}
if (!requireNamespace("rstan", quietly = TRUE)){
stop ("The 'rstan' package is not installed.", call. = FALSE)
}
'%>%' <- magrittr::`%>%`
# convert qPCR data to long format
#' @srrstats {G2.7} Use as.data.frame() to allow input list of any tabular
#'   form (i.e., matrix, etc.)
qPCR_all <- as.data.frame(data$qPCR.N) %>%
dplyr::mutate(L = 1:dim(data$qPCR.N)[1]) %>%
tidyr::pivot_longer(cols =! L,values_to = 'N') %>%
#' @srrstats {G2.15} Software does not assume non-missingness and actually
#'   expects it if the number of observations across sites is unequal
tidyr::drop_na()
qPCR.K_df <- as.data.frame(data$qPCR.K) %>%
dplyr::mutate(L = 1:dim(data$qPCR.K)[1]) %>%
tidyr::pivot_longer(cols =! L,values_to = 'K') %>%
#' @srrstats {G2.15} Software does not assume non-missingness and actually
#'   expects it if the number of observations across sites is unequal
tidyr::drop_na()
qPCR_all$K <- qPCR.K_df$K
# convert count data to long format
#' @srrstats {G2.7} Use as.data.frame() to allow input list of any tabular
#'   form (i.e., matrix, etc.)
count_all <- as.data.frame(data$count) %>%
dplyr::mutate(L = 1:dim(data$count)[1]) %>%
tidyr::pivot_longer(cols =! L,values_to = 'count') %>%
#' @srrstats {G2.15} Software does not assume non-missingness and actually
#' expects it if the number of observations across sites is unequal
tidyr::drop_na()
# subset count data to remove sites without traditional samples
count_df <- as.data.frame(data$count)
sub_count <- count_df[rowSums(is.na(count_df)) != ncol(count_df), ]
# add site index to count data
index_match <- as.data.frame(cbind(unique(count_all$L),
1:dim(sub_count)[1]))
colnames(index_match) <- c('L','R')
count_all <- dplyr::left_join(count_all,index_match,by='L')
# get site indices with paired and unpaired dna samples
trad_ind <- index_match$L
dna_ind <- unique(qPCR_all$L)[!unique(qPCR_all$L)%in% trad_ind]
# subset qPCR data -- paired
qPCR_all_trad <- qPCR_all[qPCR_all$L %in% trad_ind,]
L_match_trad <- as.data.frame(cbind(unique(qPCR_all_trad$L),
1:length(unique(qPCR_all_trad$L))))
colnames(L_match_trad) <- c('L','L_unique')
qPCR_all_trad <- dplyr::left_join(qPCR_all_trad,L_match_trad,by='L')
# subset qPCR data -- unpaired
if(length(dna_ind)>0){
qPCR_all_dna <- qPCR_all[qPCR_all$L %in% dna_ind,]
L_match_dna <- as.data.frame(cbind(unique(qPCR_all_dna$L),
1:length(unique(qPCR_all_dna$L))))
colnames(L_match_dna) <- c('L','L_unique')
qPCR_all_dna <- dplyr::left_join(qPCR_all_dna,L_match_dna,by='L')
} else {
qPCR_all_dna <- as.data.frame(matrix(NA,nrow=0,ncol=4))
colnames(qPCR_all_dna) <- c('L','N','K','L_unique')
L_match_dna <- as.data.frame(matrix(NA,nrow=0,ncol=4))
}
# if q == TRUE, add count type data to count df
if(isCatch_type(q)){
q_ref <- 1
#' @srrstats {G2.7} Use as.data.frame() to allow input list of any tabular
#'   form (i.e., matrix, etc.)
count.type_df <- as.data.frame(data$count.type) %>%
dplyr::mutate(L = 1:dim(data$count.type)[1]) %>%
tidyr::pivot_longer(cols =! L,values_to = 'count.type') %>%
tidyr::drop_na()
count_all$count.type <- count.type_df$count.type
#create vector of q coefficient names
counttypes <- unique(count_all$count.type)
names <- counttypes[!counttypes == q_ref]
#' @srrstats {G2.4,G2.4c} Explicit conversion to character
q_names <- as.character(paste0('q_',names))
#add dummy variables for count type
for(i in seq_along(q_names)){
count_all[,q_names[i]] <- ifelse(count_all$count.type == names[i],1,0)
}
}
# if present, prepare covariate data
if(all(!is.null(cov))){
#' @srrstats {G2.7,G2.10} Use as.data.frame() to allow input list of any
#'   tabular form (i.e., matrix, etc.) and converts before filtering columns
#'   based on input 'cov'
site_mat <- as.data.frame(as.data.frame(data$site.cov)[,cov])
site_mat <- cbind(as.data.frame(rep(1,length(site_mat[,1]))),site_mat)
colnames(site_mat) <- c('int',cov)
}
# convert p10 prior
# p10 prior: convert beta(1,20) to lognormal distribution
# moment match from beta(alpha,beta) to normal(mu, sigma^2)
alpha <- p10priors[1]
beta <- p10priors[2]
mu <- alpha/(alpha+beta)
sigma_2 <- (alpha*beta)/((alpha+beta)^2*(alpha+beta+1))
# convert normal(mu, sigma^2) to lognormal(mu, sigma^2)
mu_ln <- log(mu^2/sqrt(mu^2+sigma_2))
sigma_2_ln <- log(1+sigma_2/mu^2)
sigma_ln <- sqrt(sigma_2_ln)
# create data that will be present in all model variations
model_data <- list(
S = nrow(qPCR_all_trad),
S_dna = nrow(qPCR_all_dna),
C = nrow(count_all),
L = qPCR_all_trad$L_unique,
L_dna = qPCR_all_dna$L_unique,
R = count_all$R,
Nloc_dna = length(unique(qPCR_all_dna$L)),
Nloc_trad = length(unique(qPCR_all_trad$L)),
trad_ind = trad_ind,
dna_ind = as.array(dna_ind),
E = count_all$count,
N = qPCR_all_trad$N,
K = qPCR_all_trad$K,
N_dna = qPCR_all_dna$N,
K_dna = qPCR_all_dna$K,
p10priors = c(mu_ln,sigma_ln),
control = list(adapt_delta = adapt_delta)
)
# append data if q == TRUE
if(isCatch_type(q)){
model_data <- rlist::list.append(
model_data,
nparams = length(q_names),
mat = as.matrix(count_all[,q_names])
)
}
# append data if family == negbin
if(isNegbin_type(family)){
model_data <- rlist::list.append(
model_data,
phipriors = phipriors
)
}
# append data if cov != NULL
if(isCov_type(cov)){
model_data <- rlist::list.append(
model_data,
nsitecov = length(cov)+1,
mat_site = as.matrix(site_mat)
)
}
# set up core number
cores <- ifelse(multicore == TRUE,
parallel::detectCores(),
1)
# get seed
SEED <- ifelse(!is.null(seed),
as.integer(seed),
sample.int(.Machine$integer.max, 1))
# get stan model
model_index <- get_stan_model(q, family, cov)
# get initial values
if(isCatch_type(q)){
inits <- get_inits(n.chain,qPCR_all,initial_values,cov,L_match_trad,
L_match_dna,data,q_names)
} else {
inits <- get_inits(n.chain,qPCR_all,initial_values,cov,L_match_trad,
L_match_dna,data)
}
inits
#' @srrstats {G5.2,G5.2b} Tests the assure function input checks are behaving
#'   as expected.
# run joint model to do tests with
model1 <- suppressWarnings({jointModel(data = gobyData,
cov = c('Filter_time','Salinity'),
n.chain = 1,n.iter.burn = 25,
n.iter.sample = 75,multicore = FALSE)})
model2 <- suppressWarnings({jointModel(data = greencrabData,family = 'negbin',
n.chain = 1,n.iter.burn = 25,
n.iter.sample = 75,multicore = FALSE)})
#1. make sure model fit is of class stanfit
expect_error(detectionCalculate(as.matrix(model1$model), mu = c(0.1, 0.5),
cov.val = c(0,0)),
"modelfit must be of class 'stanfit'.")
#2. make sure ci is valid
expect_error(detectionCalculate(model1$model, mu = c('0', 0.5),
cov.val = c(0,0)),
"mu must be a numeric vector of positive values")
#3. make sure mu is a numeric vector of positive values
expect_error(detectionCalculate(model1$model, mu = c(0, 0.5),
cov.val = c(0,0)),
"mu must be a numeric vector of positive values")
#4. make sure probability is a numeric value between 0 and 1
expect_error(detectionCalculate(model1$model, mu = c(0.1, 0.5),
cov.val = c(0,0), probability = 1.05),
"probability must be a numeric value between 0 and 1")
#5. cov.val is numeric, if provided
expect_error(detectionCalculate(model1$model, mu = c(0.1, 0.5),
cov.val = c('0',0)),
"cov.val must be a numeric vector")
#6. Only include input cov.val if covariates are included in model
expect_error(detectionCalculate(model2$model, mu = c(0.1, 0.5),
cov.val = c(0,0)),
paste0("cov.val must be NULL if the model does not ",
"contain site-level covariates."))
#7. Input cov.val is the same length as the number of estimated covariates.
expect_error(detectionCalculate(model1$model, mu = c(0.1, 0.5),
cov.val = c(0,0,0)),
paste0("cov.val must be of the same length as the number of ",
"non-intercept site-level coefficients in the model."))
#8. If covariates are in model, cov.val must be provided
expect_error(detectionCalculate(model1$model, mu = c(0.1, 0.5)),
paste0("cov.val must be provided if the model contains ",
"site-level covariates."))
#9. qPCR.N must be an integer
expect_error(detectionCalculate(model1$model, mu = c(0.1, 0.5),
cov.val = c(0,0), qPCR.N = 6.8),
"qPCR.N should be an integer.")
codemetar::write_codemeta()
install.packages('codemetar')
codemetar::write_codemeta()
utils::find(na.omit)
??na.omit
stats::na.omit(c(NA,1,1,))
stats::na.omit(c(NA,1,1,2))
data <- data(greencrabData)
data <- greencrabData
rowMeans(data$count,na.rm=TRUE)+0.01
na.omit(rowMeans(data$count,na.rm=TRUE)+0.01)
na.omit(c(rowMeans(data$count,na.rm=TRUE)+0.01,NA))
as.vector(na.omit(c(rowMeans(data$count,na.rm=TRUE)+0.01,NA)))
verbose <- TRUE
div_trans <- 10
# print either troubleshooting or visualization tips
if(div_trans>0 & verbose){
url <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette/',
'tips.html#troubleshooting-tips')
message <- 'Refer to the eDNAjoint guide for troubleshooting tips: '
cat(message, url, "\n")
} else {
print('no')
}
# print either troubleshooting or visualization tips
if(div_trans>0 && verbose){
url <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette/',
'tips.html#troubleshooting-tips')
message <- 'Refer to the eDNAjoint guide for troubleshooting tips: '
cat(message, url, "\n")
} else {
print('no')
}
verbose <- FALSE
# print either troubleshooting or visualization tips
if(div_trans>0 & verbose){
url <- paste0('https://bookdown.org/abigailkeller/eDNAjoint_vignette/',
'tips.html#troubleshooting-tips')
message <- 'Refer to the eDNAjoint guide for troubleshooting tips: '
cat(message, url, "\n")
} else {
print('no')
}
roxygen2::roxygenise()
codemetar::write_codemeta()
codemetar::write_codemeta()
roxygen2::roxygenise()
